/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, or any plugin's
 * vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any other CSS/SCSS
 * files in this directory. Styles in this file should be added after the last require_* statement.
 * It is generally better to create a new file per style scope.
 *
 *= require_tree .
 *= require_self
 */


 @import 'bootstrap-sprockets';
 @import 'bootstrap';




// ======================================mycontainer
 .mycontainer {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
  }


  @media (min-width: 576px) {
    .mycontainer {
      width: 95%;
    }
  }
  
  @media (min-width: 768px) {
    .mycontainer {
      width: 93%;
    }
  }
  
  @media (min-width: 992px) {
    .mycontainer {
      width: 90%;
    }
  }
  
  @media (min-width: 1200px) {
    .mycontainer {
      width: 87%;
    }
  }


  // ========================================mybigcontainer
  .mybigcontainer {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
  }


  @media (min-width: 576px) {
    .mybigcontainer {
      width: 95%;
    }
  }
  
  @media (min-width: 768px) {
    .mybigcontainer {
      width: 93%;
    }
  }
  
  @media (min-width: 992px) {
    .mybigcontainer {
      width: 90%;
    }
  }
  
  @media (min-width: 1200px) {
    .mybigcontainer {
      width: 87%;
    }
  }

  // =============================================mylittlecontainer


  .mylittlecontainer {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
  }


  @media (min-width: 576px) {
    .mylittlecontainer {
      width: 95%;
    }
  }
  
  @media (min-width: 768px) {
    .mylittlecontainer {
      width: 93%;
    }
  }
  
  @media (min-width: 992px) {
    .mylittlecontainer {
      width: 90%;
    }
  }
  
  @media (min-width: 1200px) {
    .mylittlecontainer {
      width: 87%;
    }
  }



//=================================big et little contenair display



@media (min-width: 992px) {
  .mybigcontainer {
    display: grid;
    grid-gap: 60px;
    grid-template-columns: repeat(auto-fit, minmax(425px, 1fr));
    grid-template-rows: auto;
  }
}
@media (min-width: 992px) {
  .mylittlecontenair {
    display: none;
  }
  .dontdisplayifmediasup992 {
    display: none;
  }
}

@media (max-width: 992px) {
  .mybigcontainer {
    display: none;
  }
}

//=================================================


@media (max-width: 768px) {
  .dontdisplayifmediaunder768 {
    display: none;
  }
}

@media (max-width: 992px) {
  .dontdisplayifmediaunder992 {
    display: none;
  }
}


@media (max-width: 1200px) {
  .dontdisplayifmediaunder1200 {
    display: none;
  }
}


@media (max-width: 1600px) {
  .dontdisplayifmediaunder1600 {
    display: none;
  }
}

@media (max-width: 1800px) {
  .dontdisplayifmediaunder1800 {
    display: none;
  }
}


  /* 
  ============================================container
  */
  .container {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
  }


  @media (min-width: 576px) {
    .container {
      width: 95%;
    }
  }
  
  @media (min-width: 768px) {
    .container {
      width: 93%;
    }
  }
  
  @media (min-width: 992px) {
    .container {
      width: 90%;
    }
  }
  
  @media (min-width: 1200px) {
    .container {
      width: 87%;
    }
  }



//============ backim




//====================test grid




  $grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 1024px,
  xl: 1200px,
);

$container-max-widths: (
  sm: 576px,
  md: 768px,
  lg: 1024px,
  xl: 1200px,
);

/*
.mygrid{
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  grid-template-rows: auto;
}
*/


/*
@media (min-width: 34em) {
  .card-columns {
      -webkit-column-count: 3;
      -moz-column-count: 3;
      column-count: 3;
  }
}

@media (min-width: 48em) {
  .card-columns {
      -webkit-column-count: 2;
      -moz-column-count: 2;
      column-count: 2;
  }
}

@media (min-width: 62em) {
  .card-columns {
      -webkit-column-count: 3;
      -moz-column-count: 3;
      column-count: 3;
  }
}

@media (min-width: 75em) {
  .card-columns {
      -webkit-column-count: 4;
      -moz-column-count: 4;
      column-count: 4;
  }
}

*/

form {
    box-sizing: content-box;
    display: block;
    margin-top: 0em;
}


*, *::before, *::after {
  box-sizing: content-box; 
}


form{box-sizing:content-box;display:block;margin-top:0em}
*,*::before,*::after{box-sizing:content-box}




// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $mycontainer-max-width;
    }
  }
}



// ============================== CARROUSSEL ==================================


// Notes on the classes:
//
// 1. The .carousel-item-left and .carousel-item-right is used to indicate where
//    the active slide is heading.
// 2. .active.carousel-item is the current slide.
// 3. .active.carousel-item-left and .active.carousel-item-right is the current
//    slide in its in-transition state. Only one of these occurs at a time.
// 4. .carousel-item-next.carousel-item-left and .carousel-item-prev.carousel-item-right
//    is the upcoming slide in transition.

.carousel {
  position: relative;
}

.carousel-inner {
  position: relative;
  width: 100%;
  overflow: hidden;
}

.carousel-item {
  position: relative;
  display: none;
  align-items: center;
  width: 100%;
  @include transition($carousel-transition);
  backface-visibility: hidden;
  perspective: 1000px;
}

.carousel-item.active,
.carousel-item-next,
.carousel-item-prev {
  display: block;
}

.carousel-item-next,
.carousel-item-prev {
  position: absolute;
  top: 0;
}

.carousel-item-next.carousel-item-left,
.carousel-item-prev.carousel-item-right {
  transform: translateX(0);

  @supports (transform-style: preserve-3d) {
    transform: translate3d(0, 0, 0);
  }
}

.carousel-item-next,
.active.carousel-item-right {
  transform: translateX(100%);

  @supports (transform-style: preserve-3d) {
    transform: translate3d(100%, 0, 0);
  }
}

.carousel-item-prev,
.active.carousel-item-left {
  transform: translateX(-100%);

  @supports (transform-style: preserve-3d) {
    transform: translate3d(-100%, 0, 0);
  }
}


//
// Alternate transitions
//

.carousel-fade {
  .carousel-item {
    opacity: 0;
    transition-duration: .6s;
    transition-property: opacity;
  }

  .carousel-item.active,
  .carousel-item-next.carousel-item-left,
  .carousel-item-prev.carousel-item-right {
    opacity: 1;
  }

  .active.carousel-item-left,
  .active.carousel-item-right {
    opacity: 0;
  }

  .carousel-item-next,
  .carousel-item-prev,
  .carousel-item.active,
  .active.carousel-item-left,
  .active.carousel-item-prev {
    transform: translateX(0);

    @supports (transform-style: preserve-3d) {
      transform: translate3d(0, 0, 0);
    }
  }
}


//
// Left/right controls for nav
//

.carousel-control-prev,
.carousel-control-next {
  position: absolute;
  top: 0;
  bottom: 0;
  // Use flex for alignment (1-3)
  display: flex; // 1. allow flex styles
  align-items: center; // 2. vertically center contents
  justify-content: center; // 3. horizontally center contents
  width: $carousel-control-width;
  color: $carousel-control-color;
  text-align: center;
  opacity: $carousel-control-opacity;
  // We can't have a transition here because WebKit cancels the carousel
  // animation if you trip this while in the middle of another animation.

  // Hover/focus state
  @include hover-focus {
    color: $carousel-control-color;
    text-decoration: none;
    outline: 0;
    opacity: .9;
  }
}
.carousel-control-prev {
  left: 0;
  @if $enable-gradients {
    background: linear-gradient(90deg, rgba($black, .25), rgba($black, .001));
  }
}
.carousel-control-next {
  right: 0;
  @if $enable-gradients {
    background: linear-gradient(270deg, rgba($black, .25), rgba($black, .001));
  }
}

// Icons for within
.carousel-control-prev-icon,
.carousel-control-next-icon {
  display: inline-block;
  width: $carousel-control-icon-width;
  height: $carousel-control-icon-width;
  background: transparent no-repeat center center;
  background-size: 100% 100%;
}
.carousel-control-prev-icon {
  background-image: $carousel-control-prev-icon-bg;
}
.carousel-control-next-icon {
  background-image: $carousel-control-next-icon-bg;
}


// Optional indicator pips
//
// Add an ordered list with the following class and add a list item for each
// slide your carousel holds.

.carousel-indicators {
  position: absolute;
  right: 0;
  bottom: 10px;
  left: 0;
  z-index: 15;
  display: flex;
  justify-content: center;
  padding-left: 0; // override <ol> default
  // Use the .carousel-control's width as margin so we don't overlay those
  margin-right: $carousel-control-width;
  margin-left: $carousel-control-width;
  list-style: none;

  li {
    position: relative;
    flex: 0 1 auto;
    width: $carousel-indicator-width;
    height: $carousel-indicator-height;
    margin-right: $carousel-indicator-spacer;
    margin-left: $carousel-indicator-spacer;
    text-indent: -999px;
    cursor: pointer;
    background-color: rgba($carousel-indicator-active-bg, .5);

    // Use pseudo classes to increase the hit area by 10px on top and bottom.
    &::before {
      position: absolute;
      top: -10px;
      left: 0;
      display: inline-block;
      width: 100%;
      height: 10px;
      content: "";
    }
    &::after {
      position: absolute;
      bottom: -10px;
      left: 0;
      display: inline-block;
      width: 100%;
      height: 10px;
      content: "";
    }
  }

  .active {
    background-color: $carousel-indicator-active-bg;
  }
}


// Optional captions
//
//

.carousel-caption {
  position: absolute;
  right: ((100% - $carousel-caption-width) / 2);
  bottom: 20px;
  left: ((100% - $carousel-caption-width) / 2);
  z-index: 10;
  padding-top: 20px;
  padding-bottom: 20px;
  color: $carousel-caption-color;
  text-align: center;
}

