/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS and SCSS file within this directory, lib/assets/stylesheets, or any plugin's
 * vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any other CSS/SCSS
 * files in this directory. Styles in this file should be added after the last require_* statement.
 * It is generally better to create a new file per style scope.
 *
 *= require_tree .
 *= require_self
 */


 @import 'bootstrap-sprockets';
 @import 'bootstrap';


  /* 
  ============================================container
  */
  .container {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
  }


  @media (min-width: 576px) {
    .container {
      width: 95%;
    }
  }
  
  @media (min-width: 768px) {
    .container {
      width: 93%;
    }
  }
  
  @media (min-width: 992px) {
    .container {
      width: 90%;
    }
  }
  
  @media (min-width: 1200px) {
    .container {
      width: 87%;
    }
  }



// ======================================mycontainer
 .mycontainer {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
  }


  @media (min-width: 576px) {
    .mycontainer {
      width: 95%;
    }
  }
  
  @media (min-width: 768px) {
    .mycontainer {
      width: 93%;
    }
  }
  
  @media (min-width: 992px) {
    .mycontainer {
      width: 90%;
    }
  }
  
  @media (min-width: 1200px) {
    .mycontainer {
      width: 87%;
    }
  }


  // ========================================mybigcontainer
  .mybigcontainer {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
  }


  @media (min-width: 576px) {
    .mybigcontainer {
      width: 95%;
    }
  }
  
  @media (min-width: 768px) {
    .mybigcontainer {
      width: 93%;
    }
  }
  
  @media (min-width: 992px) {
    .mybigcontainer {
      width: 90%;
    }
  }
  
  @media (min-width: 1200px) {
    .mybigcontainer {
      width: 87%;
    }
  }

  // =============================================mylittlecontainer


  .mylittlecontainer {
    width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
  }


  @media (min-width: 576px) {
    .mylittlecontainer {
      width: 95%;
    }
  }
  
  @media (min-width: 768px) {
    .mylittlecontainer {
      width: 93%;
    }
  }
  
  @media (min-width: 992px) {
    .mylittlecontainer {
      width: 90%;
    }
  }
  
  @media (min-width: 1200px) {
    .mylittlecontainer {
      width: 87%;
    }
  }



//=================================big et little contenair display



@media (min-width: 992px) {
  .mybigcontainer {
    display: grid;
    grid-gap: 35px;
    grid-template-columns: repeat(auto-fit, minmax(425px, 1fr));
    grid-template-rows: auto;
  }
}
@media (min-width: 992px) {
  .mylittlecontenair {
    display: none;
  }
  .dontdisplayifmediasup992 {
    display: none;
  }
}

@media (max-width: 992px) {
  .mybigcontainer {
    display: none;
  }
}

//================================================= DONT DISPLAY ===


@media (max-width: 768px) {
  .dontdisplayifmediaunder768 {
    display: none;
  }
}
@media (min-width: 768px) {
  .dontdisplayifmediasup768 {
    display: none;
  }
}

@media (max-width: 992px) {
  .dontdisplayifmediaunder992 {
    display: none;
  }
}


@media (max-width: 1200px) {
  .dontdisplayifmediaunder1200 {
    display: none;
  }
}


@media (max-width: 1600px) {
  .dontdisplayifmediaunder1600 {
    display: none;
  }
}

@media (max-width: 1800px) {
  .dontdisplayifmediaunder1800 {
    display: none;
  }
}






//============ backim




//====================test grid




  $grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 1024px,
  xl: 1200px,
);

$container-max-widths: (
  sm: 576px,
  md: 768px,
  lg: 1024px,
  xl: 1200px,
);

/*
.mygrid{
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  grid-template-rows: auto;
}
*/


/*
@media (min-width: 34em) {
  .card-columns {
      -webkit-column-count: 3;
      -moz-column-count: 3;
      column-count: 3;
  }
}

@media (min-width: 48em) {
  .card-columns {
      -webkit-column-count: 2;
      -moz-column-count: 2;
      column-count: 2;
  }
}

@media (min-width: 62em) {
  .card-columns {
      -webkit-column-count: 3;
      -moz-column-count: 3;
      column-count: 3;
  }
}

@media (min-width: 75em) {
  .card-columns {
      -webkit-column-count: 4;
      -moz-column-count: 4;
      column-count: 4;
  }
}

*/

form {
    box-sizing: content-box;
    display: block;
    margin-top: 0em;
}


*, *::before, *::after {
  box-sizing: content-box; 
}


form{box-sizing:content-box;display:block;margin-top:0em}
*,*::before,*::after{box-sizing:content-box}




// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $mycontainer-max-width;
    }
  }
}



// ============================== CARROUSSEL ==================================



/*

.rotatingrandom {
  transform: rotate( random(-2, 2)deg);
}
*/
.rotating{
  transform: rotate(5deg);
}

.rotating3d {
  transform: rotate3d(1, 1, 1, 5deg);
}



//   =======================================================try polaroid =================================================


/*  =============== Avec ul li ================

ul.polaroids :after {
  content: attr(title);
}


ul.polaroids {
  -webkit-transform: rotate(-2deg);
  -moz-transform: rotate(-2deg);
}
 

ul.polaroids li:nth-child(even) {
  -webkit-transform: rotate(2deg);
  -moz-transform: rotate(2deg);
}
 
ul.polaroids li:nth-child(3n) {
  -webkit-transform: none;
  -moz-transform: none;
  position: relative;
  top: -5px;
}
 

ul.polaroids li:nth-child(5n) {
  -webkit-transform: rotate(5deg);
  -moz-transform: rotate(5deg);
  position: relative;
  right: 5px;
}
 

ul.polaroids li:nth-child(8n) {
  position: relative;
  top: 8px;
  right: 5px;
}
 

ul.polaroids li:nth-child(11n) {
  position: relative;
  top: 3px;
  left: -5px;
}

ul.polaroids a:hover {
  -webkit-transform: scale(1.25);
  -moz-transform: scale(1.25);
  position: relative;
  z-index: 5;
}



ul.polaroids {
  -webkit-transition: -webkit-transform .15s linear;
  -webkit-box-shadow: 0 3px 6px rgba(0,0,0,.25);
  -moz-box-shadow: 0 3px 6px rgba(0,0,0,.25);
}
 

ul.polaroids {
  -webkit-box-shadow: 0 3px 6px rgba(0,0,0,.5);
  -moz-box-shadow: 0 3px 6px rgba(0,0,0,.5);
}

*/



.polaroid {
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}


// ========================================== Orientation diff√©rentes des cartes selon leur ordre .... =======================================


.card {
  
  transform: rotate(-3deg);
  
  }
.card:hover {

    transform: rotate(0deg);
    z-index: 1.2;
    
    }


.card:nth-of-type(n+1) {

  transform: rotate(5deg);
  
  }
.card:nth-of-type(n+1):hover {

  transform: rotate(0deg);
  z-index: 1.2;
    
  }


.card:nth-of-type(n+2) {
    transform: rotate(-1deg);
    }

.card:nth-of-type(n+2):hover {
    transform: rotate(0deg);
    z-index: 1.2;        
    }


.card:nth-of-type(n+3) {
      transform: rotate(-2deg);
      }
      
.card:nth-of-type(n+3):hover {
      transform: rotate(0deg);
      z-index: 1.2;        
      }


.card:nth-of-type(n+4) {
        transform: rotate(3deg);
        }
        
.card:nth-of-type(n+4):hover {
        transform: rotate(0deg);
        z-index: 1.2;        
        }

        
       
          
.card:nth-of-type(n+5) {
            transform: rotate(-4deg);
            }
        
.card:nth-of-type(n+5):hover {
            transform: rotate(0deg);
            z-index: 1.2;        
            }
        

        
.card:nth-of-type(n+6) {
              transform: rotate(6deg);
              }
              
.card:nth-of-type(n+6):hover {
              transform: rotate(0deg);
              z-index: 1.2;        
              }
        
        

.card:nth-of-type(n+7) {
                transform: rotate(-3deg);
                }

.card:nth-of-type(n+7):hover {
                transform: rotate(-5deg);
                z-index: 1.2;        
                }
  
                
                
.card:nth-of-type(n+9) {

                  transform: rotate(2deg);
                  
                  }
.card:nth-of-type(n+9):hover {
        
                  transform: rotate(0deg);
                  z-index: 1.2;
                    
                  }